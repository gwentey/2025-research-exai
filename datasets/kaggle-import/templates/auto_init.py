#!/usr/bin/env python3
"""
Auto-initialisation des templates √©thiques.

Ce script est appel√© automatiquement au d√©marrage pour s'assurer que
le fichier de templates √©thiques existe avec des valeurs par d√©faut.
"""

import yaml
from pathlib import Path
import logging

# Configuration du logger
logger = logging.getLogger(__name__)

def ensure_templates_file_exists():
    """S'assure que le fichier de templates √©thiques existe."""
    
    templates_path = Path(__file__).parent / "ethical_defaults.yaml"
    
    # Si le fichier existe d√©j√†, ne rien faire
    if templates_path.exists():
        logger.info(f"‚úÖ Fichier de templates trouv√©: {templates_path}")
        return True
    
    logger.info(f"üìù Cr√©ation du fichier de templates par d√©faut: {templates_path}")
    
    # Cr√©er le contenu par d√©faut
    default_content = get_default_templates_content()
    
    try:
        # Cr√©er le r√©pertoire si n√©cessaire
        templates_path.parent.mkdir(parents=True, exist_ok=True)
        
        # √âcrire le fichier
        with open(templates_path, 'w', encoding='utf-8') as f:
            f.write(default_content)
        
        logger.info(f"‚úÖ Fichier de templates cr√©√© avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du fichier de templates: {e}")
        return False


def get_default_templates_content() -> str:
    """Retourne le contenu par d√©faut du fichier de templates."""
    
    return """# =====================================
# TEMPLATES DE M√âTADONN√âES √âTHIQUES
# =====================================
# 
# Ce fichier est g√©r√© automatiquement par l'interface web d'administration.
# Modifiez les templates via : /admin/ethical-templates
#
# Derni√®re mise √† jour : G√©n√©r√© automatiquement

# Template par d√©faut (fallback)
default:
  ethical:
    informed_consent: false
    transparency: true
    user_control: false
    equity_non_discrimination: true
    security_measures_in_place: true
    data_quality_documented: true
    anonymization_applied: false
    record_keeping_policy_exists: true
    purpose_limitation_respected: true
    accountability_defined: true
  technical:
    representativity_level: "medium"
    sample_balance_level: "moderate"
  quality:
    data_errors_description: "Qualit√© √† v√©rifier selon la source"

# Template pour domaine √âDUCATION
education:
  ethical:
    informed_consent: true   # Recherche = consentement √©clair√©
    transparency: true       # Recherche = transparence obligatoire
    user_control: false     # Kaggle = pas de contr√¥le post-publication
    equity_non_discrimination: true  # √âducation = √©quit√© prioritaire
    security_measures_in_place: true
    data_quality_documented: true   # Recherche = qualit√© document√©e
    anonymization_applied: true     # √âducation = anonymisation standard
    record_keeping_policy_exists: true
    purpose_limitation_respected: true  # Recherche = usage sp√©cifique
    accountability_defined: true
  technical:
    representativity_level: "high"     # Recherche = √©chantillons repr√©sentatifs
    sample_balance_level: "balanced"   # √âtudes = √©quilibre recherch√©
  quality:
    data_errors_description: "Dataset √©ducatif - qualit√© acad√©mique attendue"

# Template pour domaine SANT√â
healthcare:
  ethical:
    informed_consent: true   # Sant√© = consentement OBLIGATOIRE
    transparency: true       # Sant√© = transparence √©thique critique
    user_control: true      # Sant√© = contr√¥le utilisateur important
    equity_non_discrimination: true  # Sant√© = √©quit√© vitale
    security_measures_in_place: true  # Sant√© = s√©curit√© renforc√©e
    data_quality_documented: true     # Sant√© = qualit√© vitale
    anonymization_applied: true       # Sant√© = anonymisation OBLIGATOIRE
    record_keeping_policy_exists: true
    purpose_limitation_respected: true # Sant√© = usage strictement d√©fini
    accountability_defined: true
  technical:
    representativity_level: "high"     # Sant√© = repr√©sentativit√© critique
    sample_balance_level: "moderate"   # Sant√© = √©quilibre selon pathologies
  quality:
    data_errors_description: "Dataset sant√© - qualit√© m√©dicale v√©rifi√©e obligatoire"

# Template pour domaine BUSINESS
business:
  ethical:
    informed_consent: false  # Business = souvent donn√©es publiques
    transparency: true       # Business = processus document√©s
    user_control: false
    equity_non_discrimination: true  # Business = √©viter discrimination commerciale
    security_measures_in_place: true
    data_quality_documented: true
    anonymization_applied: false    # Business = souvent donn√©es agr√©g√©es
    record_keeping_policy_exists: true
    purpose_limitation_respected: true
    accountability_defined: true
  technical:
    representativity_level: "high"      # Business = √©chantillons complets
    sample_balance_level: "imbalanced"  # Business = d√©s√©quilibres naturels
  quality:
    data_errors_description: "Dataset business - v√©rifier coh√©rence m√©tiers"
"""


def validate_templates_file():
    """Valide que le fichier de templates est correct."""
    
    templates_path = Path(__file__).parent / "ethical_defaults.yaml"
    
    if not templates_path.exists():
        return False, "Fichier de templates non trouv√©"
    
    try:
        with open(templates_path, 'r', encoding='utf-8') as f:
            templates = yaml.safe_load(f)
        
        # V√©rifications basiques
        if not isinstance(templates, dict):
            return False, "Structure YAML invalide"
        
        if 'default' not in templates:
            return False, "Template 'default' manquant"
        
        # V√©rifier que chaque template a les sections requises
        for domain, template in templates.items():
            if 'ethical' not in template:
                return False, f"Section 'ethical' manquante pour {domain}"
            
            if 'technical' not in template:
                return False, f"Section 'technical' manquante pour {domain}"
        
        return True, f"Fichier valide avec {len(templates)} templates"
        
    except yaml.YAMLError as e:
        return False, f"Erreur YAML: {e}"
    except Exception as e:
        return False, f"Erreur de validation: {e}"


def auto_initialize():
    """Fonction principale d'auto-initialisation."""
    
    logger.info("üöÄ Auto-initialisation des templates √©thiques...")
    
    # 1. S'assurer que le fichier existe
    if not ensure_templates_file_exists():
        logger.error("‚ùå √âchec de la cr√©ation du fichier de templates")
        return False
    
    # 2. Valider le fichier
    is_valid, message = validate_templates_file()
    if not is_valid:
        logger.error(f"‚ùå Fichier de templates invalide: {message}")
        # Tenter de recr√©er le fichier
        logger.info("üîÑ Tentative de recr√©ation du fichier...")
        Path(__file__).parent / "ethical_defaults.yaml".unlink(missing_ok=True)
        return ensure_templates_file_exists()
    
    logger.info(f"‚úÖ Templates √©thiques pr√™ts: {message}")
    return True


if __name__ == "__main__":
    # Ex√©cution directe du script
    import sys
    
    success = auto_initialize()
    sys.exit(0 if success else 1)