#!/usr/bin/env python3
"""
Script de d√©ploiement EXAI - Version multiplateforme

Ce script d√©ploie les composants principaux d'EXAI (PostgreSQL, API Gateway, Service Selection)
sur un cluster Kubernetes et v√©rifie l'√©tat des pods.
Compatible avec Windows, macOS et Linux.
"""

import os
import sys
import time
import subprocess
import platform

# --- Configuration ---
NAMESPACE = "exai"

# Chemins vers les manifestes K8s (relatifs √† la racine du projet)
POSTGRES_K8S_DIR = "k8s/postgres/"
GATEWAY_K8S_DIR = "api-gateway/k8s/"
SELECTION_K8S_DIR = "service-selection/k8s/"

# Labels pour identifier les pods
POSTGRES_LABEL = "app=postgresql"
GATEWAY_LABEL = "app=api-gateway"
SELECTION_LABEL = "app=service-selection"

# D√©termine l'ex√©cutable kubectl (ajoute .exe sous Windows si n√©cessaire)
KUBECTL = "kubectl.exe" if platform.system() == "Windows" else "kubectl"

def print_colored(message, color=None):
    """Affiche un message avec une couleur (si support√© par le terminal)"""
    colors = {
        'green': '\033[92m',
        'yellow': '\033[93m',
        'red': '\033[91m',
        'blue': '\033[94m',
        'bold': '\033[1m',
        'end': '\033[0m'
    }
    
    # D√©sactive les couleurs sur Windows CMD (sauf Windows Terminal moderne)
    if platform.system() == "Windows" and "TERM" not in os.environ:
        print(message)
        return

    if color and color in colors:
        print(f"{colors[color]}{message}{colors['end']}")
    else:
        print(message)

def run_command(command, exit_on_error=True):
    """Ex√©cute une commande shell et retourne son r√©sultat"""
    try:
        # L'utilisation de shell=True est n√©cessaire pour certaines commandes complexes
        # mais est g√©n√©ralement d√©conseill√©e pour des raisons de s√©curit√©
        result = subprocess.run(command, shell=True, check=True, text=True,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå Erreur lors de l'ex√©cution de la commande: {command}", "red")
        print_colored(f"Code de sortie: {e.returncode}", "red")
        print_colored(f"Erreur: {e.stderr}", "red")
        if exit_on_error:
            sys.exit(1)
        return None

def apply_manifests(directory, component_name):
    """Applique les manifestes Kubernetes depuis un r√©pertoire"""
    print_colored("-----------------------------------------------------")
    print_colored(f"üöÄ D√©ploiement de {component_name} depuis {directory}...", "blue")
    
    # V√©rifier si le r√©pertoire existe
    if not os.path.exists(directory):
        print_colored(f"‚ùå Le r√©pertoire {directory} n'existe pas!", "red")
        sys.exit(1)
        
    cmd = f'{KUBECTL} apply -f "{directory}" -n {NAMESPACE}'
    output = run_command(cmd)
    
    if output:
        print_colored(f"‚úÖ Manifestes pour {component_name} appliqu√©s avec succ√®s.", "green")
        if output.strip():
            print(output)

def check_pods(label, component_name):
    """V√©rifie l'√©tat des pods correspondant √† un label"""
    print_colored("-----------------------------------------------------")
    print_colored(f"üîç V√©rification du statut du pod {component_name} (label: {label})...", "blue")
    
    cmd = f'{KUBECTL} get pods -n {NAMESPACE} -l {label}'
    output = run_command(cmd, exit_on_error=False)
    
    if output:
        print(output)
    else:
        print_colored(f"‚ö†Ô∏è Impossible de v√©rifier les pods pour {component_name}", "yellow")

def main():
    """Fonction principale du script de d√©ploiement"""
    print_colored("üöÄ D√©marrage du d√©ploiement EXAI sur le namespace " + 
                  f"'{NAMESPACE}'...", "bold")
    
    # V√©rifier si kubectl est install√©
    try:
        subprocess.run([KUBECTL, "version", "--client"], 
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print_colored("‚ùå kubectl n'est pas install√© ou n'est pas dans le PATH!", "red")
        print_colored("Veuillez installer kubectl avant de continuer.", "red")
        sys.exit(1)
        
    # V√©rifier si le namespace existe, le cr√©er si n√©cessaire
    namespace_check = subprocess.run(
        f'{KUBECTL} get namespace {NAMESPACE}', 
        shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    
    if namespace_check.returncode != 0:
        print_colored(f"‚ö†Ô∏è Le namespace {NAMESPACE} n'existe pas. Cr√©ation...", "yellow")
        run_command(f'{KUBECTL} create namespace {NAMESPACE}')
    
    # 1. D√©ployer PostgreSQL
    apply_manifests(POSTGRES_K8S_DIR, "PostgreSQL")
    
    # 2. D√©ployer API Gateway
    apply_manifests(GATEWAY_K8S_DIR, "API Gateway")
    
    # 3. D√©ployer Service Selection
    apply_manifests(SELECTION_K8S_DIR, "Service Selection")
    
    # Attendre que les pods d√©marrent
    print_colored("‚è≥ Attente de quelques secondes pour que les pods d√©marrent...", "yellow")
    time.sleep(10)  # Pause pour laisser les pods d√©marrer
    
    # 4. V√©rifier les pods
    check_pods(POSTGRES_LABEL, "PostgreSQL")
    check_pods(GATEWAY_LABEL, "API Gateway")
    check_pods(SELECTION_LABEL, "Service Selection")
    
    # 5. Afficher tous les pods du namespace
    print_colored("-----------------------------------------------------")
    print_colored(f"üìä Tous les pods dans le namespace {NAMESPACE}:", "blue")
    run_command(f'{KUBECTL} get pods -n {NAMESPACE}', exit_on_error=False)
    
    print_colored("-----------------------------------------------------")
    print_colored("üèÅ Script de d√©ploiement termin√© avec succ√®s! üéâ", "green")
    print_colored("-----------------------------------------------------")
    print_colored("üìù N'oubliez pas d'appliquer les migrations Alembic pour", "yellow")
    print_colored("   initialiser le sch√©ma de la base de donn√©es.", "yellow")
    print_colored("   Voir la section 3.4 du guide de d√©marrage.", "yellow")

if __name__ == "__main__":
    main() 