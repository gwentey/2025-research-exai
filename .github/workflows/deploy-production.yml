name: Build, Migrate, and Deploy Production

on:
  push:
    branches:
      - production

env:
  AZURE_CONTAINER_REGISTRY: 'exaiprodacr'
  AZURE_RESOURCE_GROUP: 'exai-prod-rg'
  AKS_CLUSTER_NAME: 'exai-prod-aks'
  K8S_NAMESPACE: 'exai'
  API_GATEWAY_IMAGE_NAME: 'exai-api-gateway'
  SERVICE_SELECTION_IMAGE_NAME: 'service-selection'
  FRONTEND_IMAGE_NAME: 'frontend'

jobs:
  build_push_deploy:
    name: Build, Push, Migrate & Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Connexion à Azure AVANT le build/push --- 
      # Configure Docker pour utiliser les identifiants du SP pour l'ACR
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # --- Connexion Docker Explicite à l'ACR ---
      - name: Log in to Azure Container Registry (Explicit)
        run: |
          ACR_TOKEN=$(az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }} --expose-token --output tsv --query accessToken)
          echo $ACR_TOKEN | docker login ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password-stdin

      # Obtenir le SHA court du commit pour le tag
      - name: Get short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # --- Build et Push des images (maintenant après le login Azure) ---
      - name: Build and push API Gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          file: ./api-gateway/Dockerfile
          push: true
          tags: |  # Utiliser un bloc multiligne pour plusieurs tags
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.API_GATEWAY_IMAGE_NAME }}:${{ env.sha_short }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.API_GATEWAY_IMAGE_NAME }}:latest

      - name: Build and push Service Selection image
        uses: docker/build-push-action@v5
        with:
          context: ./service-selection
          file: ./service-selection/Dockerfile
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.SERVICE_SELECTION_IMAGE_NAME }}:${{ env.sha_short }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.sha_short }}
          build-args: |
            ANGULAR_ENV=production

      # --- Configuration kubectl (reste ici) ---
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      # --- Créer le namespace s'il n'existe pas ---
      - name: Create Kubernetes Namespace (if not exists)
        run: kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      # --- Déploiement initial/Mise à jour de TOUTES les ressources --- 
      # Installer Skaffold
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/
          skaffold version

      - name: Deploy ALL applications and infrastructure via Skaffold
        run: skaffold deploy --profile=azure --tag=${{ env.sha_short }} -n ${{ env.K8S_NAMESPACE }}

      # --- Attendre que PostgreSQL soit prêt ---
      - name: Wait for PostgreSQL Pod to be Ready
        # Attend que le pod géré par le statefulset soit dans l'état Ready
        # ATTENTION: Ceci ne garantit pas que la DB interne est prête, mais c'est un bon début.
        # Augmenter le timeout si nécessaire.
        run: kubectl wait pod --selector=app=postgresql --for=condition=Ready -n ${{ env.K8S_NAMESPACE }} --timeout=5m

      # --- Migration de la base de données (MAINTENANT APRÈS SKAFFOLD DEPLOY) ---
      # Optionnel: Supprimer l'ancien job s'il existe pour éviter les conflits
      - name: Delete Previous Migration Job (if exists)
        run: kubectl delete job api-gateway-migration-job -n ${{ env.K8S_NAMESPACE }} --ignore-not-found=true

      - name: Apply Database Migration Job
        run: kubectl apply -f k8s/base/jobs/api-gateway-migration-job.yaml -n ${{ env.K8S_NAMESPACE }}

      - name: Wait for Database Migration Job to Complete
        run: kubectl wait --for=condition=complete job/api-gateway-migration-job -n ${{ env.K8S_NAMESPACE }} --timeout=5m

      # --- (Optionnel) Redémarrer les applications dépendant de la DB ---
      - name: Rollout restart API Gateway (ensure it uses migrated schema)
        run: kubectl rollout restart deployment api-gateway -n ${{ env.K8S_NAMESPACE }}

      # (Ajouter ici d'autres 'rollout restart' pour service-selection, etc. si nécessaire)

      # --- Nettoyage (Optionnel) ---
      - name: Delete Completed Migration Job (optional)
        if: success() # Ne supprime que si le déploiement a réussi
        run: kubectl delete job api-gateway-migration-job -n ${{ env.K8S_NAMESPACE }} --ignore-not-found=true