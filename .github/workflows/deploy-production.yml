name: Build and Push Production Images

on:
  push:
    branches:
      - production

env:
  AZURE_CONTAINER_REGISTRY: 'exaimemoireacr'
  API_GATEWAY_IMAGE_NAME: 'exai-api-gateway'
  SERVICE_SELECTION_IMAGE_NAME: 'service-selection'
  FRONTEND_IMAGE_NAME: 'frontend'

jobs:
  build_and_push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Obtenir le SHA court du commit pour le tag
      - name: Get short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Installer Skaffold
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/
          skaffold version

      # Builder et pusher chaque image
      - name: Build and push API Gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          file: ./api-gateway/Dockerfile
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.API_GATEWAY_IMAGE_NAME }}:${{ env.sha_short }}

      - name: Build and push Service Selection image
        uses: docker/build-push-action@v5
        with:
          context: ./service-selection
          file: ./service-selection/Dockerfile
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.SERVICE_SELECTION_IMAGE_NAME }}:${{ env.sha_short }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.sha_short }}
          build-args: |
            ANGULAR_ENV=production

      - name: Print deployment instructions
        run: |
          echo "Images have been built and pushed successfully!"
          echo "To deploy to AKS, run the following commands:"
          echo "az login"
          echo "az aks get-credentials --resource-group exai-production-rg --name exai-prod-aks"
          echo "skaffold run --profile=azure --tag=${{ env.sha_short }} -n exai"

  # Potentiellement ajouter un job de test ici (ex: test_backend, test_frontend)
  # test_backend:
  #   name: Run Backend Tests
  #   runs-on: ubuntu-latest
  #   needs: build_and_push # Ou exécuter en parallèle si pas de dépendance directe
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11' # ou la version utilisée
  #     - name: Install backend dependencies
  #       run: |
  #         pip install -r api-gateway/requirements.txt
  #         pip install -r service-selection/requirements.txt
  #         # ... autres dépendances ...
  #     - name: Run backend tests
  #       run: |
  #         # cd api-gateway && pytest # exemple
  #         # cd ../service-selection && pytest # exemple
  #         echo "Backend tests would run here" # Placeholder

  deploy_to_aks:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build_and_push # S'assurer que les images sont buildées avant de déployer
    # needs: [build_and_push, test_backend, test_frontend] # Si les tests sont ajoutés et requis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Secret contenant les credentials du service principal Azure

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      # Obtenir le SHA court du commit pour s'assurer qu'on utilise le bon tag
      - name: Get short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Option 1: Déployer avec Skaffold (plus simple si déjà configuré)
      - name: Set up Skaffold
        uses: GoogleCloudPlatform/setup-skaffold@v2

      - name: Skaffold Run with Azure Profile
        # Skaffold utilise les tags définis dans skaffold.yaml, mais nous voulons forcer l'utilisation du tag spécifique du commit
        # Skaffold v2+ permet de passer des tags via --tag
        # Skaffold va utiliser le profile 'azure' qui contient les patches pour les noms d'image et kustomize
        run: skaffold run --profile=azure --tag=${{ env.sha_short }} -n exai # Spécifier le namespace 'exai'

      # # Option 2: Déployer avec kubectl et Kustomize (plus direct)
      # # Nécessite que les patches Kustomize dans k8s/overlays/azure mettent à jour les tags d'image
      # # Cela peut être fait manuellement dans le YAML ou dynamiquement ici :
      # - name: Update Kustomization with Image Tag
      #   run: |
      #     cd k8s/overlays/azure
      #     kustomize edit set image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.API_GATEWAY_IMAGE_NAME }}=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.API_GATEWAY_IMAGE_NAME }}:${{ env.sha_short }}
      #     kustomize edit set image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.SERVICE_SELECTION_IMAGE_NAME }}=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.SERVICE_SELECTION_IMAGE_NAME }}:${{ env.sha_short }}
      #     kustomize edit set image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_IMAGE_NAME }}=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.sha_short }}
      #     cd ../../.. # Revenir à la racine

      # - name: Deploy to AKS using Kustomize
      #   run: kubectl apply -k k8s/overlays/azure -n exai # Spécifier le namespace 'exai' 