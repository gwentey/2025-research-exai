#!/usr/bin/env python3
"""
D√©monstration du nouveau syst√®me de nettoyage des donn√©es avec cache
"""

import requests
import json
import time
from datetime import datetime

# Configuration
API_BASE_URL = "http://localhost:8082"
DATASET_ID = "550e8400-e29b-41d4-a716-446655440000"  # Exemple d'UUID

def demo_data_quality_analysis():
    """D√©montre l'analyse de qualit√© avec syst√®me de cache"""
    
    print("=" * 80)
    print("üßπ D√âMONSTRATION DU NOUVEAU SYST√àME DE NETTOYAGE DES DONN√âES")
    print("=" * 80)
    
    # 1. Premi√®re analyse (sera mise en cache)
    print("\nüìä √âtape 1: Premi√®re analyse du dataset")
    print("-" * 40)
    
    start_time = time.time()
    response = requests.post(
        f"{API_BASE_URL}/data-quality/analyze",
        json={
            "dataset_id": DATASET_ID,
            "sample_size": 5000,
            "force_refresh": False
        }
    )
    
    first_duration = time.time() - start_time
    
    if response.status_code == 200:
        analysis = response.json()
        print(f"‚úÖ Analyse r√©ussie en {first_duration:.2f} secondes")
        print(f"üìà Score de qualit√©: {analysis['data_quality_score']}/100")
        print(f"üìä Dataset: {analysis['dataset_overview']['total_rows']} lignes √ó {analysis['dataset_overview']['total_columns']} colonnes")
        
        # Afficher les colonnes avec probl√®mes
        missing_data = analysis['missing_data_analysis']['columns_with_missing']
        if missing_data:
            print("\nüîç Colonnes avec donn√©es manquantes:")
            for col_name, col_info in missing_data.items():
                print(f"  - {col_name}: {col_info['missing_percentage']:.1f}% manquants")
                print(f"    ‚Üí Strat√©gie recommand√©e: {col_info['recommended_strategy']['strategy']}")
                print(f"    ‚Üí Raison: {col_info['recommended_strategy']['reason']}")
    else:
        print(f"‚ùå Erreur: {response.status_code} - {response.text}")
        return
    
    # 2. Deuxi√®me appel (devrait utiliser le cache)
    print("\nüìä √âtape 2: Deuxi√®me analyse (depuis le cache)")
    print("-" * 40)
    
    start_time = time.time()
    response = requests.post(
        f"{API_BASE_URL}/data-quality/analyze",
        json={
            "dataset_id": DATASET_ID,
            "sample_size": 5000,
            "force_refresh": False
        }
    )
    
    cache_duration = time.time() - start_time
    
    if response.status_code == 200:
        print(f"‚úÖ Analyse depuis le cache en {cache_duration:.2f} secondes")
        print(f"‚ö° Am√©lioration de performance: {(first_duration/cache_duration):.1f}x plus rapide!")
    
    # 3. Demander une strat√©gie de preprocessing optimis√©e
    print("\nüéØ √âtape 3: Obtenir une strat√©gie de nettoyage personnalis√©e")
    print("-" * 40)
    
    response = requests.post(
        f"{API_BASE_URL}/data-quality/suggest-strategy",
        json={
            "dataset_id": DATASET_ID,
            "target_column": "default_risk",
            "task_type": "classification"
        }
    )
    
    if response.status_code == 200:
        strategy = response.json()
        print("‚úÖ Strat√©gie personnalis√©e g√©n√©r√©e:")
        
        # Afficher les strat√©gies par colonne
        print("\nüìã Strat√©gies de nettoyage par colonne:")
        for col, strat in strategy['missing_values'].items():
            print(f"  - {col}: {strat}")
        
        # Afficher l'impact estim√©
        impact = strategy['estimated_impact']
        print(f"\nüìä Impact estim√©:")
        print(f"  - Am√©lioration attendue: {impact['expected_improvement']}")
        print(f"  - Taux de r√©tention des donn√©es: {impact['data_retention_rate']*100:.0f}%")
        print(f"  - Score de confiance: {impact['confidence_score']*100:.0f}%")
    
    # 4. Forcer une nouvelle analyse
    print("\nüìä √âtape 4: Forcer une nouvelle analyse (ignorer le cache)")
    print("-" * 40)
    
    response = requests.post(
        f"{API_BASE_URL}/data-quality/analyze",
        json={
            "dataset_id": DATASET_ID,
            "sample_size": 5000,
            "force_refresh": True  # Force une nouvelle analyse
        }
    )
    
    if response.status_code == 200:
        print("‚úÖ Nouvelle analyse forc√©e avec succ√®s")
        print("üí° Utile si le dataset a √©t√© modifi√©")

def demo_cleaning_workflow():
    """D√©montre le workflow complet de nettoyage"""
    
    print("\n" + "=" * 80)
    print("üîÑ WORKFLOW COMPLET DE NETTOYAGE")
    print("=" * 80)
    
    # Simuler les √©tapes du wizard
    steps = [
        ("1Ô∏è‚É£ S√©lection du dataset", "Dataset 'Customer Churn' s√©lectionn√©"),
        ("2Ô∏è‚É£ Analyse de qualit√©", "D√©tection de 5 colonnes avec donn√©es manquantes"),
        ("3Ô∏è‚É£ Application Auto-Fix", "Strat√©gies optimales appliqu√©es automatiquement"),
        ("4Ô∏è‚É£ Validation manuelle", "Ajustement de 2 strat√©gies par l'utilisateur"),
        ("5Ô∏è‚É£ Configuration sauvegard√©e", "Pr√™t pour l'entra√Ænement ML")
    ]
    
    for step, description in steps:
        print(f"\n{step}")
        print(f"  ‚Üí {description}")
        time.sleep(0.5)  # Petite pause pour l'effet
    
    print("\n‚úÖ Nettoyage termin√© avec succ√®s!")
    print("üìä R√©sum√©:")
    print("  - Colonnes supprim√©es: 1 (>80% manquants)")
    print("  - Colonnes imput√©es: 4 (strat√©gies vari√©es)")
    print("  - Score de qualit√©: 85/100 ‚Üí 94/100")
    print("  - Temps total: 12 secondes")

def main():
    """Point d'entr√©e principal"""
    try:
        # V√©rifier que l'API est accessible
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code != 200:
            print("‚ùå L'API ML Pipeline n'est pas accessible")
            print("Assurez-vous que le service est d√©marr√© avec: make dev")
            return
        
        # Lancer les d√©monstrations
        demo_data_quality_analysis()
        print("\n" * 2)
        demo_cleaning_workflow()
        
        print("\n" + "=" * 80)
        print("üéâ D√©monstration termin√©e!")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        print("Assurez-vous que tous les services sont d√©marr√©s")

if __name__ == "__main__":
    main()