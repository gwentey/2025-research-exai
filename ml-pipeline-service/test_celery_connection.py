#!/usr/bin/env python
"""
Script de test pour v√©rifier la connexion Celery et l'envoi de t√¢ches.
Usage: python test_celery_connection.py
"""

import os
import sys
import time
from uuid import uuid4

# Ajouter le r√©pertoire parent au path pour importer nos modules
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.celery_app import celery_app
from app.tasks import train_model


def test_celery_connection():
    """Test la connexion √† Celery et l'envoi d'une t√¢che."""
    print("üîç Test de connexion Celery...")
    
    # 1. V√©rifier la connexion au broker
    try:
        # Inspecter les workers actifs
        inspector = celery_app.control.inspect()
        active_workers = inspector.active()
        
        if active_workers:
            print(f"‚úÖ Workers actifs trouv√©s: {list(active_workers.keys())}")
        else:
            print("‚ùå Aucun worker actif trouv√©!")
            print("   V√©rifiez que le worker Celery est en cours d'ex√©cution:")
            print("   kubectl logs -n ibis-x -l app=ml-pipeline-celery-worker")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion au broker: {e}")
        print("   V√©rifiez que Redis est accessible.")
        return False
    
    # 2. V√©rifier les queues
    try:
        queues = inspector.active_queues()
        if queues:
            print(f"‚úÖ Queues actives: {queues}")
        else:
            print("‚ö†Ô∏è  Aucune queue active trouv√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'inspection des queues: {e}")
    
    # 3. Tester l'envoi d'une t√¢che
    experiment_id = str(uuid4())
    print(f"\nüì§ Envoi d'une t√¢che de test avec experiment_id: {experiment_id}")
    
    try:
        # Envoyer la t√¢che
        result = train_model.apply_async(
            args=[experiment_id],
            queue='ml_queue'
        )
        
        print(f"‚úÖ T√¢che envoy√©e avec succ√®s! Task ID: {result.id}")
        
        # Attendre un peu et v√©rifier le statut
        print("\n‚è≥ Attente de 5 secondes pour v√©rifier le statut...")
        time.sleep(5)
        
        # V√©rifier le statut
        print(f"üìä Statut de la t√¢che: {result.state}")
        
        if result.state == 'PENDING':
            print("‚ö†Ô∏è  La t√¢che est toujours en attente. Cela peut indiquer que:")
            print("   - Le worker n'a pas encore r√©cup√©r√© la t√¢che")
            print("   - Le worker n'√©coute pas sur la queue 'ml_queue'")
            print("   - Il y a un probl√®me avec la configuration Celery")
        elif result.state == 'STARTED':
            print("‚úÖ La t√¢che a d√©marr√©!")
        elif result.state == 'SUCCESS':
            print("‚úÖ La t√¢che s'est termin√©e avec succ√®s!")
        elif result.state == 'FAILURE':
            print(f"‚ùå La t√¢che a √©chou√©: {result.info}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi de la t√¢che: {e}")
        return False


def check_redis_connection():
    """V√©rifie la connexion directe √† Redis."""
    print("\nüîç Test de connexion Redis...")
    
    try:
        import redis
        from app.core.config import settings
        
        # Parser l'URL Redis
        redis_url = settings.CELERY_BROKER_URL
        if redis_url.startswith('redis://'):
            parts = redis_url.replace('redis://', '').split(':')
            host = parts[0]
            port_db = parts[1].split('/')
            port = int(port_db[0])
            db = int(port_db[1]) if len(port_db) > 1 else 0
        else:
            print(f"‚ùå Format d'URL Redis non reconnu: {redis_url}")
            return False
        
        # Tester la connexion
        r = redis.Redis(host=host, port=port, db=db)
        r.ping()
        print(f"‚úÖ Connexion Redis r√©ussie: {host}:{port}/{db}")
        
        # V√©rifier la queue
        queue_length = r.llen('ml_queue')
        print(f"üìä Nombre de t√¢ches en attente dans 'ml_queue': {queue_length}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de connexion Redis: {e}")
        return False


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TEST DE CONNEXION CELERY ET REDIS")
    print("=" * 60)
    
    # Test Redis
    redis_ok = check_redis_connection()
    
    # Test Celery
    celery_ok = test_celery_connection()
    
    print("\n" + "=" * 60)
    if redis_ok and celery_ok:
        print("‚úÖ TOUS LES TESTS SONT PASS√âS!")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("\nüìã Actions recommand√©es:")
        if not redis_ok:
            print("   1. V√©rifier que Redis est en cours d'ex√©cution")
            print("      kubectl get pods -n ibis-x | grep redis")
        if not celery_ok:
            print("   2. V√©rifier que le worker Celery est en cours d'ex√©cution")
            print("      kubectl get pods -n ibis-x | grep celery")
            print("   3. V√©rifier les logs du worker")
            print("      kubectl logs -n ibis-x -l app=ml-pipeline-celery-worker")
    print("=" * 60)