---
alwaysApply: true
---
- Rule: Lire PRD pour Exigences
  Trigger: Always
  Description: Toujours lire memory-bank/prd_ibis_x_poc_v2.md avant d'écrire ou de modifier du code lié aux fonctionnalités ou aux exigences pour assurer l'alignement avec les spécifications. Consulter la section spécifique pertinente pour la tâche en cours si possible.

- Rule: Lire Tech Stack pour Choix Techniques
  Trigger: Always
  Description: Toujours lire memory-bank/tech_stack_ibis_x_v2 avant de faire des choix concernant les bibliothèques (ex: Angular Material vs autres), frameworks, composants d'infrastructure (ex: NGINX Ingress vs AGIC), ou détails d'implémentation spécifiques (ex: stratégie de stockage, configuration Celery). Adhérer strictement aux technologies choisies.

- Rule: Lire Document Architecture
  Trigger: Always
  Description: Toujours lire memory-bank/architecture.md avant d'écrire ou de modifier du code pour comprendre la structure actuelle du projet, les responsabilités des microservices, les patterns de communication, et le but des fichiers. Inclure les détails pertinents du schéma de base de données (depuis PRD ou doc architecture) si modification des interactions BDD.

- Rule: Mettre à jour Document Architecture
  Trigger: After generating code that adds a major feature, completes a significant step (as defined in the implementation plan), or modifies the architecture (e.g., adds a new file/service, changes inter-service communication, modifies DB schema significantly).
  Description: Mettre à jour memory-bank/architecture.md pour refléter précisément les changements effectués. Expliquer le but des nouveaux fichiers/services ou les modifications de structure et d'interactions. Rester concis mais informatif.

-  Rule: Utiliser les Templates Existants Angular
  Trigger: Before creating or modifying any Angular component, page or layout
  Description: Toujours commencer par examiner les exemples de templates existants dans .cursor/templates/src/app/ avant toute création ou modification sur le frontend Angular Observer toutes les pages disponibles pour comprendre comment sont conçus : les boutons (style, structure, icônes, comportements), les boîtes de contenu, cartes, panels, etc. la structure générale des pages (layout, responsive design, navigation). Réutiliser et adapter les composants ou structures existants autant que possible avant d'en créer de nouveaux. L'objectif est d'assurer cohérence visuelle, réutilisabilité, et maintenabilité dans toute l'application Angular.


-  Rule: Faire une version anglais et version francais avec  @ngx-translate/core et @ngx-translate/http-loader 
  Trigger: Before creating or modifying any Angular component, page or layout
  Description: Il faut que tu faces la traduction dans les deux langues afin que l'application ai 2 langues


# --- RÈGLE DOCUMENTATION OBLIGATOIRE ---
# Trigger: Après génération ou modification de code fonctionnel (API Backend, Composant Frontend, Logique métier principale).

- Rule: Générer/MAJ Documentation Antora
  Trigger: After generating or modifying functional code (Backend API endpoints, Frontend Components, significant business logic).
  Description: OBLIGATOIRE - Pour toute nouvelle fonctionnalité, endpoint API, ou changement de code significatif, générer ou mettre à jour la documentation utilisateur/technique correspondante dans le dossier `docs/` en utilisant le format Antora/Asciidoc. La documentation doit être claire, accessible aux non-développeurs, inclure des exemples si pertinent, et expliquer la fonctionnalité/l'usage. Aucune fonctionnalité n'est complète sans sa documentation associée. Référencer le fichier Asciidoc spécifique à créer/modifier si possible.

# --- BONNES PRATIQUES GÉNÉRALES ---
# Trigger: Avant de générer du code

- Rule: Modularité et Responsabilité Unique
  Trigger: Before generating code
  Description: Assurer que le code est hautement modulaire. Créer des fichiers/fonctions/classes séparés pour des responsabilités distinctes (ex: séparer opérations CRUD de la logique des endpoints, séparer transformation de données de l'entraînement ML). Éviter les fichiers monolithiques ou les fonctions faisant trop de choses. Suivre strictement l'architecture microservices définie dans tech-stack.md.

- Rule: Typage (Python & TypeScript)
  Trigger: Before generating code
  Description: Utiliser les indications de type statiques (`type hints`) de manière extensive et précise dans tout le code Python (backend FastAPI) et TypeScript (frontend Angular). Utiliser `Optional`, `List`, `Dict` de `typing` en Python lorsque approprié.

- Rule: Docstrings et Commentaires
  Trigger: Before generating code
  Description: Générer des docstrings Python claires (style Google ou reStructuredText) pour tous les modules, classes, fonctions et méthodes publics. Générer des commentaires JSDoc/TSDoc pour les fonctions/classes/méthodes TypeScript. Ajouter des commentaires inline uniquement pour la logique complexe ou non évidente.

- Rule: Gestion des Erreurs
  Trigger: Before generating code
  Description: Implémenter une gestion des erreurs spécifique et robuste. Dans FastAPI, utiliser des `HTTPException` spécifiques avec des codes de statut et messages de détail appropriés pour les erreurs API attendues. Utiliser des blocs try/except pour les opérations susceptibles d'échouer (I/O, appels réseau, parsing). Logger les erreurs de manière appropriée. Dans Angular, gérer les erreurs `HttpClient` dans les services et les propager ou les gérer proprement dans les composants.

- Rule: Configuration via Variables d'Environnement
  Trigger: Before generating code, especially for backend services and K8s manifests.
  Description: Éviter strictement de coder en dur les valeurs de configuration (URL BDD, URL Redis, Secrets JWT, endpoints API externes, etc.). Toute configuration doit être chargée depuis des variables d'environnement. Utiliser `BaseSettings` de Pydantic dans les services FastAPI pour charger et valider les variables d'environnement. Référencer les Secrets ou ConfigMaps K8s pour injecter ces variables d'environnement dans les déploiements.

# --- BACKEND (FastAPI / Python) ---
# Trigger: Avant de générer du code Python pour les services backend (`api-gateway/`, `service-selection/`, `ml-pipeline/`, `xai-engine/`)

- Rule: Structure Projet FastAPI
  Trigger: Before generating Python code for backend services
  Description: Structurer les applications FastAPI logiquement dans un sous-dossier `app/`. Utiliser `APIRouter` pour les différentes sections logiques de l'API. Séparer les responsabilités dans des fichiers distincts : `models.py` (SQLAlchemy), `schemas.py` (Pydantic), `crud.py` (opérations BDD), `services.py` (logique métier), `tasks.py` (tâches Celery), `database.py` (config session BDD), `core/config.py` (settings).

- Rule: Pydantic pour Contrats API
  Trigger: Before generating Python code involving API requests/responses or data validation.
  Description: Définir des modèles Pydantic dans `schemas.py` pour tous les corps de requête API, paramètres de query, et structures de réponse. Utiliser ces schémas dans les signatures de fonction des endpoints FastAPI pour validation automatique et dans `response_model` pour la sérialisation. Utiliser des types spécifiques et validateurs si nécessaire.

- Rule: SQLAlchemy pour Interaction BDD
  Trigger: Before generating Python code involving database operations
  Description: Utiliser SQLAlchemy ORM pour toutes les interactions BDD avec PostgreSQL. Définir les modèles héritant d'une base déclarative dans `models.py`. Utiliser l'injection de dépendances (`Depends`) dans les endpoints FastAPI pour obtenir les sessions BDD (`Session = Depends(get_db)`). Encapsuler toute la logique de requête BDD dans des fonctions dans `crud.py` (ex: `get_dataset`, `create_pipeline_run`).

- Rule: Alembic pour Migrations (Rappel)
  Trigger: When modifying SQLAlchemy models (`models.py`).
  Description: Après modification des modèles de base de données (`app/models.py`), se rappeler qu'un script de migration Alembic DOIT être généré via `alembic revision --autogenerate -m "Brève description du changement"` puis appliqué (`alembic upgrade head`). Ne pas instruire de modification directe du schéma BDD en dehors d'Alembic.

- Rule: Définition et Usage Tâches Celery
  Trigger: Before generating code for long-running operations in `ml-pipeline` or `xai-engine`.
  Description: Définir les tâches longues dans `tasks.py` en utilisant le décorateur `@celery_app.task`. Les tâches doivent accepter des arguments simples (IDs, références de fichiers, dictionnaires de configuration). Utiliser `apply_async(args=[...], kwargs={...}, queue='specific_queue')` pour dispatcher les tâches vers les files appropriées (`ml_queue`, `xai_queue`). Assurer que les tâches mettent à jour le statut et les résultats dans la BDD à la fin ou en cas d'erreur.

# --- FRONTEND (Angular) ---
# Trigger: Avant de générer du code TypeScript/HTML/CSS pour le frontend (`frontend/`)

- Rule: Modularité et Structure Angular
  Trigger: Before generating Angular code
  Description: Organiser l'application en modules fonctionnels (`ng generate module ...`). Utiliser `CoreModule` pour les singletons (services, intercepteurs) et `SharedModule` pour les composants/pipes/directives réutilisables. Implémenter le lazy loading pour les modules fonctionnels dans la configuration de routage principale.

- Rule: Conception Composants (Smart/Dumb)
  Trigger: Before generating Angular components
  Description: Privilégier la création de composants "Smart" (conteneurs) responsables de récupérer les données via les services et de les passer aux enfants, et de composants "Dumb" (présentationnels) qui reçoivent les données via `@Input()` et émettent des événements via `@Output()`. Garder la logique des composants centrée sur la vue.

- Rule: Utilisation Angular Material
  Trigger: Before generating Angular HTML templates requiring UI elements.
  Description: Utiliser les composants Angular Material de manière cohérente pour l'UI (ex: `MatTable`, `MatPaginator`, `MatSort`, `MatButton`, `MatFormField`, `MatInput`, `MatSelect`, `MatCheckbox`, `MatSlider`, `MatCard`, `MatDialog`, `MatStepper`, `MatChip`). Importer les modules Material requis (ex: `MatTableModule`, `MatButtonModule`) dans le module Angular fonctionnel correspondant.

- Rule: Services Angular et HttpClient
  Trigger: Before generating code that interacts with the backend API.
  Description: Créer des Services Angular dédiés (`ng generate service ...`) dans les modules fonctionnels ou core. Injecter `HttpClient`. Définir des méthodes pour chaque appel API, retournant des `Observable`s RxJS. Gérer la configuration de l'URL de base de l'API de manière centralisée (ex: fichiers d'environnement). Implémenter la gestion des erreurs pour les requêtes HTTP dans le service ou permettre aux composants de souscrire au canal d'erreur.

- Rule: Formulaires Réactifs Angular
  Trigger: Before generating Angular forms (e.g., filters, pipeline config).
  Description: Utiliser l'API Reactive Forms d'Angular (`FormBuilder`, `FormGroup`, `FormControl`, `Validators`) pour tous les formulaires. Définir la structure du formulaire dans le fichier TypeScript du composant. Lier le formulaire au template en utilisant `[formGroup]` et `formControlName`.

# --- Kubernetes (K8s) & Infrastructure ---
# Trigger: Avant de générer ou modifier les manifestes YAML K8s (`k8s/`) ou les Dockerfiles

- Rule: Utilisation Kustomize
  Trigger: Before generating or modifying K8s YAML manifests
  Description: Adhérer strictement à la structure Kustomize (`k8s/base/`, `k8s/overlays/minikube/`, `k8s/overlays/azure/`). Placer les manifestes génériques dans `base/`. Utiliser les overlays appropriés pour spécifier les configurations spécifiques à l'environnement (tags d'image, replicas, limites de ressources, références ConfigMap/Secret) : `minikube` pour développement local, `azure` pour production.

- Rule: Nommage Ressources K8s IBIS-X
  Trigger: Before generating K8s YAML manifests
  Description: Utiliser des noms cohérents, en minuscules, séparés par des tirets pour les ressources K8s (ex: `service-selection-deployment`, `postgres-service`, `redis-pvc`). Utiliser le namespace `ibis-x` pour toutes les ressources de l'application. Préfixer les noms de ressources avec le nom du service pour éviter les conflits.

- Rule: Injection Configuration K8s
  Trigger: Before generating K8s Deployments requiring configuration.
  Description: Injecter la configuration dans les Pods exclusivement via des variables d'environnement peuplées depuis des ConfigMaps K8s (pour données non sensibles) et des Secrets K8s (pour données sensibles comme mots de passe, clés API, secret JWT). Définir les sections `envFrom` ou `env` dans le manifeste du Deployment. Utiliser le namespace `ibis-x` pour tous les secrets et configmaps.

- Rule: Bonnes Pratiques Dockerfile
  Trigger: Before generating or modifying Dockerfiles.
  Description: Utiliser des builds multi-étapes si approprié (ex: étape build pour frontend Angular). Utiliser des images de base spécifiques et légères (ex: `python:3.11-slim`). Minimiser les couches. Utiliser des utilisateurs non-root. Copier uniquement les fichiers nécessaires dans l'image. Spécifier `CMD` ou `ENTRYPOINT`. Nommer les images avec le préfixe `ibis-x-` (ex: `ibis-x-api-gateway`, `ibis-x-frontend`).

- Rule: Configuration Skaffold
  Trigger: When adding new services or modifying build/deploy logic.
  Description: Assurer que `skaffold.yaml` liste correctement tous les artefacts à builder (mappant Dockerfiles aux noms d'images avec préfixe `ibis-x-`) et utilise Kustomize pour le déploiement ciblant l'overlay approprié : `k8s/overlays/minikube/` pour développement local, `k8s/overlays/azure/` pour production.
