#!/bin/bash

# Script de suppression de l'infrastructure Azure EXAI
# Utilise Terraform pour d√©truire toutes les ressources cr√©√©es

set -e  # Arr√™ter le script en cas d'erreur

# Variables de configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TERRAFORM_DIR="$PROJECT_ROOT/terraform/azure-infrastructure"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Azure CLI
    if ! command -v az &> /dev/null; then
        log_error "Azure CLI n'est pas install√©. Installez-le depuis https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
        exit 1
    fi
    
    # V√©rifier Terraform
    if ! command -v terraform &> /dev/null; then
        log_error "Terraform n'est pas install√©. Installez-le depuis https://www.terraform.io/downloads.html"
        exit 1
    fi
    
    # V√©rifier que le r√©pertoire Terraform existe
    if [ ! -d "$TERRAFORM_DIR" ]; then
        log_error "Le r√©pertoire Terraform n'existe pas: $TERRAFORM_DIR"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Fonction pour v√©rifier la connexion Azure
check_azure_login() {
    log_info "V√©rification de la connexion Azure..."
    
    if ! az account show &> /dev/null; then
        log_warning "Vous n'√™tes pas connect√© √† Azure. Connexion en cours..."
        az login
    fi
    
    # Afficher le compte actuel
    ACCOUNT_INFO=$(az account show --output json)
    SUBSCRIPTION_NAME=$(echo "$ACCOUNT_INFO" | jq -r '.name')
    SUBSCRIPTION_ID=$(echo "$ACCOUNT_INFO" | jq -r '.id')
    
    log_success "Connect√© √† Azure:"
    echo "  Subscription: $SUBSCRIPTION_NAME"
    echo "  ID: $SUBSCRIPTION_ID"
}

# Fonction pour afficher les ressources qui seront supprim√©es
show_resources_to_destroy() {
    log_info "Analyse des ressources qui seront supprim√©es..."
    
    cd "$TERRAFORM_DIR"
    
    # V√©rifier si le state file existe
    if [ ! -f "terraform.tfstate" ]; then
        log_warning "Aucun fichier d'√©tat Terraform trouv√©. Il se peut qu'aucune ressource ne soit d√©ploy√©e."
        return
    fi
    
    # Afficher le plan de destruction
    log_info "G√©n√©ration du plan de destruction..."
    terraform plan -destroy -out=destroy_plan
    
    echo
    log_warning "‚ö†Ô∏è  ATTENTION: Les ressources suivantes seront D√âFINITIVEMENT supprim√©es !"
    echo
}

# Fonction pour demander confirmation
ask_confirmation() {
    log_warning "üö® DERNI√àRE CHANCE - Cette action est IRR√âVERSIBLE !"
    echo
    echo "Cette op√©ration va supprimer :"
    echo "- Tous les clusters Kubernetes et applications"
    echo "- Tous les comptes de stockage et donn√©es"
    echo "- Toutes les images Docker dans ACR"
    echo "- Tous les r√©seaux virtuels et IPs publiques"
    echo "- Tous les logs et m√©triques de monitoring"
    echo
    log_error "‚ö†Ô∏è  TOUTES VOS DONN√âES SERONT PERDUES !"
    echo
    
    # Triple confirmation pour √©viter les erreurs
    read -p "Tapez 'SUPPRIMER' (en majuscules) pour confirmer: " confirm1
    if [ "$confirm1" != "SUPPRIMER" ]; then
        log_info "Suppression annul√©e."
        exit 0
    fi
    
    read -p "√ätes-vous absolument certain ? (oui/NON): " confirm2
    if [ "$confirm2" != "oui" ]; then
        log_info "Suppression annul√©e."
        exit 0
    fi
    
    echo
    log_warning "D√©marrage de la suppression dans 10 secondes..."
    log_warning "Appuyez sur Ctrl+C pour annuler maintenant !"
    
    for i in {10..1}; do
        echo -n "‚è∞ $i "
        sleep 1
    done
    echo
    echo
}

# Fonction pour supprimer les applications Kubernetes en premier
cleanup_kubernetes_resources() {
    log_info "Nettoyage des ressources Kubernetes..."
    
    # V√©rifier si kubectl est disponible et configur√©
    if command -v kubectl &> /dev/null; then
        # Essayer de supprimer les ressources EXAI si elles existent
        if kubectl get namespace exai &> /dev/null; then
            log_info "Suppression des applications EXAI de Kubernetes..."
            
            # Supprimer les jobs de migration s'ils existent
            kubectl delete job --all -n exai --ignore-not-found=true
            
            # Supprimer tous les d√©ploiements, services, etc.
            kubectl delete all --all -n exai --ignore-not-found=true
            
            # Supprimer les secrets et configmaps
            kubectl delete secrets --all -n exai --ignore-not-found=true
            kubectl delete configmaps --all -n exai --ignore-not-found=true
            
            # Supprimer les PVCs
            kubectl delete pvc --all -n exai --ignore-not-found=true
            
            log_success "Applications Kubernetes supprim√©es"
        else
            log_info "Namespace exai non trouv√©, ignor√©"
        fi
    else
        log_warning "kubectl non disponible, impossible de nettoyer les ressources Kubernetes"
    fi
}

# Fonction pour vider les containers de stockage
cleanup_storage_containers() {
    log_info "Nettoyage des containers de stockage..."
    
    cd "$TERRAFORM_DIR"
    
    # R√©cup√©rer le nom du compte de stockage s'il existe
    if terraform show &> /dev/null; then
        STORAGE_ACCOUNT=$(terraform output -raw storage_account_name 2>/dev/null || echo "")
        
        if [ -n "$STORAGE_ACCOUNT" ]; then
            log_info "Vidage du compte de stockage: $STORAGE_ACCOUNT"
            
            # Lister et supprimer tous les blobs dans tous les containers
            CONTAINERS=$(az storage container list --account-name "$STORAGE_ACCOUNT" --query "[].name" -o tsv 2>/dev/null || echo "")
            
            for container in $CONTAINERS; do
                log_info "Vidage du container: $container"
                az storage blob delete-batch --account-name "$STORAGE_ACCOUNT" --source "$container" --only-show-errors 2>/dev/null || true
            done
            
            log_success "Containers de stockage vid√©s"
        fi
    fi
}

# Fonction pour supprimer les images ACR
cleanup_acr_images() {
    log_info "Nettoyage des images dans Azure Container Registry..."
    
    cd "$TERRAFORM_DIR"
    
    # R√©cup√©rer le nom de l'ACR s'il existe
    if terraform show &> /dev/null; then
        ACR_NAME=$(terraform output -raw acr_name 2>/dev/null || echo "")
        
        if [ -n "$ACR_NAME" ]; then
            log_info "Suppression des images dans ACR: $ACR_NAME"
            
            # Lister et supprimer tous les repositories
            REPOS=$(az acr repository list --name "$ACR_NAME" --output tsv 2>/dev/null || echo "")
            
            for repo in $REPOS; do
                log_info "Suppression du repository: $repo"
                az acr repository delete --name "$ACR_NAME" --repository "$repo" --yes 2>/dev/null || true
            done
            
            log_success "Images ACR supprim√©es"
        fi
    fi
}

# Fonction pour ex√©cuter la destruction Terraform
destroy_infrastructure() {
    log_info "üî• Suppression de l'infrastructure Azure avec Terraform..."
    
    cd "$TERRAFORM_DIR"
    
    # Appliquer le plan de destruction
    terraform apply destroy_plan
    
    log_success "Infrastructure Azure supprim√©e !"
}

# Fonction pour nettoyer les fichiers locaux
cleanup_local_files() {
    log_info "Nettoyage des fichiers locaux..."
    
    cd "$TERRAFORM_DIR"
    
    # Supprimer les fichiers de plan
    rm -f tfplan destroy_plan
    
    # Optionnel: supprimer le state file (d√©commenter si souhait√©)
    # log_warning "Suppression du fichier d'√©tat Terraform..."
    # rm -f terraform.tfstate terraform.tfstate.backup
    
    # Restaurer les fichiers de configuration d'origine
    K8S_DIR="$PROJECT_ROOT/k8s"
    
    if [ -f "$K8S_DIR/base/service-selection/storage-secrets.yaml.backup" ]; then
        mv "$K8S_DIR/base/service-selection/storage-secrets.yaml.backup" "$K8S_DIR/base/service-selection/storage-secrets.yaml"
        log_info "Fichier storage-secrets.yaml restaur√©"
    fi
    
    if [ -f "$K8S_DIR/overlays/azure/kustomization.yaml.backup" ]; then
        mv "$K8S_DIR/overlays/azure/kustomization.yaml.backup" "$K8S_DIR/overlays/azure/kustomization.yaml"
        log_info "Fichier kustomization.yaml restaur√©"
    fi
    
    log_success "Fichiers locaux nettoy√©s"
}

# Fonction pour afficher le r√©sum√© final
show_cleanup_summary() {
    log_success "üéâ Suppression compl√®te termin√©e !"
    echo
    echo "üìã Ressources supprim√©es :"
    echo "========================="
    echo "‚úÖ Applications Kubernetes"
    echo "‚úÖ Cluster AKS"
    echo "‚úÖ Comptes de stockage et donn√©es"
    echo "‚úÖ Container Registry et images"
    echo "‚úÖ R√©seaux virtuels et IPs"
    echo "‚úÖ Monitoring et logs"
    echo "‚úÖ Groupe de ressources principal"
    echo
    echo "üí° Pour red√©ployer l'infrastructure :"
    echo "  ./scripts/deploy-to-azure.sh"
    echo
    log_success "Votre environnement Azure est maintenant compl√®tement nettoy√©."
}

# Fonction de gestion d'erreur
handle_error() {
    log_error "Une erreur s'est produite pendant la suppression."
    echo
    log_warning "Que faire maintenant :"
    echo "1. V√©rifiez les logs d'erreur ci-dessus"
    echo "2. Vous pouvez essayer de relancer le script"
    echo "3. Ou supprimer manuellement les ressources restantes via le portail Azure"
    echo
    echo "Pour supprimer manuellement :"
    echo "1. Connectez-vous au portail Azure: https://portal.azure.com"
    echo "2. Recherchez le groupe de ressources commen√ßant par 'exai-'"
    echo "3. Supprimez le groupe de ressources entier"
    exit 1
}

# Fonction principale
main() {
    log_warning "üóëÔ∏è  Script de suppression de l'infrastructure Azure EXAI"
    echo
    
    # Configurer le gestionnaire d'erreur
    trap handle_error ERR
    
    # √âtapes de suppression
    check_prerequisites
    check_azure_login
    show_resources_to_destroy
    ask_confirmation
    cleanup_kubernetes_resources
    cleanup_storage_containers
    cleanup_acr_images
    destroy_infrastructure
    cleanup_local_files
    
    # Afficher le r√©sum√©
    show_cleanup_summary
}

# V√©rifier si le script est ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 