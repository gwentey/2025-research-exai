# Version de l'API Kubernetes utilisée pour cet objet.
apiVersion: apps/v1
# Type d'objet Kubernetes que nous définissons ici : un Deployment.
# Un Deployment gère le déploiement et la mise à l'échelle d'un ensemble de Pods.
kind: Deployment
# Métadonnées associées au Deployment.
metadata:
  # Nom unique du Deployment dans le namespace.
  name: service-selection
  # Namespace Kubernetes dans lequel ce Deployment sera créé.
  namespace: exai
  # Labels associées au Deployment.
  labels:
    app: service-selection
# Spécification (spec) du Deployment : décrit l'état désiré.
spec:
  # Réduire le nombre de répliques à 1 pour éviter le problème Multi-Attach avec Azure Disk
  replicas: 1
  # Sélecteur utilisé par le Deployment pour identifier les Pods qu'il doit gérer.
  selector:
    # Les Pods gérés doivent avoir ce label.
    matchLabels:
      app: service-selection
  # Template (modèle) utilisé pour créer de nouveaux Pods lorsque nécessaire.
  template:
    # Métadonnées appliquées aux Pods créés par ce template.
    metadata:
      # Labels appliqués aux Pods. Doit correspondre au `selector.matchLabels` ci-dessus.
      labels:
        app: service-selection
    # Spécification des Pods créés.
    spec:
      # Liste des conteneurs à exécuter dans chaque Pod.
      containers:
        # Nom du conteneur dans le Pod.
        - name: service-selection
          # Image Docker à utiliser pour ce conteneur.
          image: service-selection
          imagePullPolicy: IfNotPresent
          # Liste des ports que le conteneur expose.
          ports:
            # Le conteneur écoute sur le port 8081 (port d'Uvicorn).
            - containerPort: 8081
          # Variables d'environnement injectées dans le conteneur.
          envFrom:
            - secretRef:
                name: db-secrets
          # Définition des ressources (CPU, mémoire) requises et limitées pour le conteneur.
          resources:
            # Ressources minimales garanties pour le conteneur.
            requests:
              memory: "256Mi"
              cpu: "250m"
            # Limites maximales de ressources que le conteneur peut consommer.
            limits:
              memory: "512Mi"
              cpu: "500m"
          # Readiness Probe : Vérifie si le conteneur est prêt à accepter du trafic.
          # Kubernetes n'enverra pas de trafic au Pod tant que cette sonde n'est pas réussie.
          readinessProbe:
            # Type de sonde : une requête HTTP GET.
            httpGet:
              # Chemin à vérifier.
              path: / # La racine de notre API devrait retourner 200 OK.
              # Port sur lequel envoyer la requête.
              port: 8081
            # Délai initial avant la première sonde.
            initialDelaySeconds: 10 # Attend 10s que le conteneur démarre
            # Période entre les sondes.
            periodSeconds: 10
          # Liveness Probe : Vérifie si le conteneur est toujours en cours d'exécution et fonctionnel.
          # Si cette sonde échoue plusieurs fois, Kubernetes redémarrera le conteneur.
          livenessProbe:
            httpGet:
              path: / # Idem, la racine devrait répondre.
              port: 8081
            initialDelaySeconds: 20 # Attend un peu plus longtemps avant de vérifier la vitalité
            periodSeconds: 20
          # Montage de volumes dans le conteneur.
          volumeMounts:
            - name: dataset-storage
              mountPath: /datasets
      # Définition des volumes disponibles pour ce Pod.
      volumes:
        - name: dataset-storage
          persistentVolumeClaim:
            claimName: dataset-pvc
