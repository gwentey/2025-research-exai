apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql # Nouveau nom pour la ressource StatefulSet
  namespace: exai
  labels:
    app: postgresql
spec:
  serviceName: "postgresql-headless" # Doit correspondre au nom du Headless Service ci-dessus
  replicas: 1
  selector:
    matchLabels:
      app: postgresql # Doit correspondre aux labels du pod template
  template: # La définition du Pod (très similaire à celle du Deployment)
    metadata:
      labels:
        app: postgresql # Les pods auront ce label
    spec:
      terminationGracePeriodSeconds: 30 # Temps pour l'arrêt propre
      initContainers: # Garde l'init container pour nettoyer lost+found
      - name: remove-lost-found
        image: busybox:1.36
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Checking for lost+found in /var/lib/postgresql/data..."
          rm -rf /var/lib/postgresql/data/lost+found
          echo "lost+found removed if it existed."
        volumeMounts:
        - name: postgresql-data # Référence le volume défini dans volumeClaimTemplates
          mountPath: /var/lib/postgresql/data
      containers:
      - name: postgresql
        image: postgres:15
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: tcp-postgresql # Correspondance avec le port du service
        env: # Garde les mêmes variables d'environnement
        - name: POSTGRES_DB
          value: exai_db
        - name: POSTGRES_USER
          value: exai_user
        - name: POSTGRES_PASSWORD
          value: password # RAPPEL: Mieux vaut utiliser un Secret ici !
        resources: # Garde les mêmes ressources
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        volumeMounts:
        - name: postgresql-data # Référence le volume défini dans volumeClaimTemplates
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates: # Définit comment créer le PVC pour chaque pod
  - metadata:
      name: postgresql-data # Nom du volume logique qui sera utilisé dans les volumeMounts
    spec:
      accessModes: [ "ReadWriteOnce" ] # Mode d'accès standard pour Azure Disk
      storageClassName: standard # Explicitement défini pour Minikube
      resources:
        requests:
          storage: 1Gi # Taille du disque, correspond à ton ancien PVC 